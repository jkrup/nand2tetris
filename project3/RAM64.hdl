// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
  IN in[16], load, address[6];
  OUT out[16];

 PARTS:
  DMux8Way  (in=load, sel=address[0..2],
             a=reg0-in, b=reg1-in, c=reg2-in, d=reg3-in, e=reg4-in, f=reg5-in,
             g=reg6-in, h=reg7-in);

  RAM8      (in=in, load=reg0-in, address=address[3..5], out=reg0);
  RAM8      (in=in, load=reg1-in, address=address[3..5], out=reg1);
  RAM8      (in=in, load=reg2-in, address=address[3..5], out=reg2);
  RAM8      (in=in, load=reg3-in, address=address[3..5], out=reg3);
  RAM8      (in=in, load=reg4-in, address=address[3..5], out=reg4);
  RAM8      (in=in, load=reg5-in, address=address[3..5], out=reg5);
  RAM8      (in=in, load=reg6-in, address=address[3..5], out=reg6);
  RAM8      (in=in, load=reg7-in, address=address[3..5], out=reg7);

  Mux8Way16 (a=reg0, b=reg1, c=reg2, d=reg3, e=reg4, f=reg5, g=reg6, h=reg7,
             sel=address[0..2], out=out);
}
