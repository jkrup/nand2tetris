// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

  IN  inM[16],         // M value input  (M = contents of RAM[A])
    instruction[16], // Instruction for execution
    reset;           // Signals whether to re-start the current
  // program (reset==1) or continue executing
  // the current program (reset==0).

  OUT outM[16],        // M value output
    writeM,          // Write to M?
    addressM[15],    // Address in data memory (of M)
    pc[15];          // address of next instruction

 PARTS:
  // a or c instruction?
  And (a=instruction[15], b=true, out=c-bit);
  Not (in=c-bit, out=a-bit);

  // Set all the control bits
  // Format: C = 111 a cccccc ddd jjj
  And (a=instruction[12], b=c-bit, out=ca-bit);
  And (a=instruction[11], b=c-bit, out=c1);
  And (a=instruction[10], b=c-bit, out=c2);
  And (a=instruction[9], b=c-bit, out=c3);
  And (a=instruction[8], b=c-bit, out=c4);
  And (a=instruction[7], b=c-bit, out=c5);
  And (a=instruction[6], b=c-bit, out=c6);
  And (a=instruction[5], b=c-bit, out=dest-a-bit);
  And (a=instruction[4], b=c-bit, out=dest-d-bit);
  And (a=instruction[3], b=c-bit, out=dest-m-bit);
  And (a=instruction[2], b=c-bit, out=j1);
  And (a=instruction[1], b=c-bit, out=j2);
  And (a=instruction[0], b=c-bit, out=j3);

  // deal with A register
  Mux16     (a=instruction, b=alu-out, sel=dest-a-bit, out=a-in);
  Or        (a=dest-a-bit,  b=a-bit,   out=a-load-bit);
  ARegister (in=a-in, load=a-load-bit, out=a-reg-out);

  // choose A or M
  Mux16     (a=a-reg-out, b=inM, sel=ca-bit, out=alu-y-in);

  // deal with D register
  DRegister (in=alu-out, load=dest-d-bit, out=alu-x-in);

  // ALU!
  ALU (x=alu-x-in, y=alu-y-in, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,
       out=alu-out, zr=zr, ng=ng);

  // Program counter
  Not (in=ng, out=not-ng);
  Not (in=zr, out=not-zr);
  And (a=ng, b=j1, out=jmp1);
  And (a=zr, b=j2, out=jmp2);
  And (a=not-ng, b=not-zr, out=jmp3-tmp); // positive?
  And (a=jmp3-tmp, b=j3, out=jmp3);
  Or  (a=jmp1, b=jmp2, out=load-tmp);
  Or  (a=load-tmp, b=jmp3, out=pc-load);
  PC  (in=a-reg-out, reset=reset, inc=true, load=pc-load, out[0..14]=pc);

  // outputs!
  And16 (a=alu-out, b=true, out=outM);
  And   (a=dest-m-bit, b=true, out=writeM);
  And16 (a=a-reg-out, b=true, out[0..14]=addressM);
  // we did pc above, directly
}
